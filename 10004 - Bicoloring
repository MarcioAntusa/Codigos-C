# UVa Online Judge
# CÃ³digo C++

# Grafo

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> *adj;
pair<bool,bool> *visited;

void bfs(int v)
{
    queue<pair<int,bool>>fila;
    fila.push(make_pair(v,false));

    visited[v].first=true;

    while(!fila.empty())
    {
        int x=int(fila.front().first);
        bool y=bool(fila.front().second);
        fila.pop();

        for(vector<int>::iterator it=adj[x].begin(); it!=adj[x].end(); ++it)
        {
            if(!visited[*it].first)
            {
                visited[*it].first=true;

                if(!y)
                {
                    fila.push(make_pair(*it,true));
                    visited[*it].second=true;
                }
                else
                {
                    fila.push(make_pair(*it,false));
                }
            }
            else if(visited[*it].second==y)
            {
                cout<<"NOT BICOLORABLE.\n";
                return;
            }
        }
    }
    cout<<"BICOLORABLE.\n";
}

int main()
{
    int n,m,v1,v2;

    while((cin>>n)&&n!=0)
    {
        cin>>m;

        adj=new vector<int>[n];
        visited = new pair<bool,bool>[n];

        for(int i=0; i<n; i++)
        {
            visited[i].first=visited[i].second=false;
        }

        for(int i=0; i<m; i++)
        {
            cin>>v1>>v2;
            adj[v1].push_back(v2);
        }

        bfs(0);
    }
}


//---------------------------------------------------------------------


#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> *adj;
bool **visited;
void bfs(int v)
{
    queue<pair<int,bool>>fila;
    fila.push(make_pair(v,false));

    visited[v][0]=true;

    while(!fila.empty())
    {
        int x=int(fila.front().first);
        bool y=bool(fila.front().second);
        fila.pop();

        for(vector<int>::iterator it=adj[x].begin(); it!=adj[x].end(); ++it)
        {
            if(!visited[*it][0])
            {
                visited[*it][0]=true;

                if(!y)
                {
                    fila.push(make_pair(*it,true));
                    visited[*it][1]=true;
                }
                else
                {
                    fila.push(make_pair(*it,false));
                }

            }
            else if(visited[*it][1]==y)
            {
                cout<<"NOT BICOLORABLE.\n";
                return;
            }
        }
    }
    cout<<"BICOLORABLE.\n";
}

int main()
{
    int n,m,v1,v2;

    while((cin>>n)&&n!=0)
    {
        cin>>m;

        adj=new vector<int>[n];
        visited=new bool*[n];

        for(int i=0; i<n; i++)
        {
            *(visited+i)=new bool[2];
        }

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<2; j++)
            {
                visited[i][j]=false;
            }
        }

        for(int i=0; i<m; i++)
        {
            cin>>v1>>v2;
            adj[v1].push_back(v2);
        }

        bfs(0);

        if(visited) delete[] visited;
    }
}
