//Problema: Há uma sequência de n moedas cujos valores são alguns inteiros positivos c1, c2,. . . , cn, não necessariamente distintos. 
//O objetivo é coletar a quantia máxima de dinheiro sujeita à restrição de que duas moedas adjacentes (vizinhas) na linha inicial não possam ser levantadas.

//Programação Dinâmica - Algoritmo Guloso


#include <iostream>

using namespace std;

int CoinRow(int V[], int n) {
  if(n==1)
    return V[0];

  if(n==2)
  return max(V[0],V[1]);

  int F[n+1], i;
  F[0] = 0; F[1] = V[0];

  for(i = 2 ; i <= n ; i++) {
    F[i] = max(V[i-1] + F[i-2], F[i-1]);
  }
  return F[n];
}

int main()
{
    int v[6] {1,4,0,7,2,10};

    cout<<CoinRow(v,6)<<'\n';
}
