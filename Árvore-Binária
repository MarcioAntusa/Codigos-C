//Árvore Binária
//Falta implementar métodos

#include <iostream>

using namespace std;

class No
{
private:
    No *esq, *dir;
    int chave;

public:
    No(int chave);
    ~No();

  int getChave(){return chave;}
	No* getEsq(){return esq;}
	No* getDir(){return dir;}
	void setEsq(No *no){esq = no;}
	void setDir(No *no){dir = no;}
};

No::No(int chave):
    chave(chave),
    esq(nullptr),
    dir(nullptr)
{}

No::~No()
{
    if(this->esq != 0) delete this->esq;
    if(this->dir != 0)  delete this->dir;
}

class Arvore
{
private:
    No *raiz;

    void printOrder(No* no)const;
    void inserirAux(No*,int chave);

public:
    Arvore();
    ~Arvore();

    No *getRaiz()const{return raiz;}
    void inserir(int chave);
    void remover();
    void Imprimir()const{printOrder(getRaiz());}
};

Arvore::Arvore():
    raiz(nullptr)
{}

Arvore::~Arvore()
{
    if(raiz)
        delete raiz;
}

void Arvore::inserir(int chave)
{
    if(raiz == nullptr)
        raiz = new No(chave);
    else
        inserirAux(raiz, chave);
}

void Arvore::inserirAux(No* no, int chave)
{
    if(chave < no->getChave())
    {
        if(no->getEsq() == NULL)
        {
            No *novo_no = new No(chave);
            no->setEsq(novo_no);
        }
        else
        {
            inserirAux(no->getEsq(), chave);
        }
    }

    else if(chave>no->getChave())
    {
        if(no->getDir() == NULL)
        {
            No *novo_no = new No(chave);
            no->setDir(novo_no);
        }
        else
        {
            inserirAux(no->getDir(), chave);
        }
    }
}

void Arvore::printOrder(No* no)const
{
    if(no!=NULL)
    {
        printOrder(no->getEsq());
        cout<<no->getChave()<<'\n';
        printOrder(no->getDir());
    }
}

int main()
{
	Arvore arv;

	arv.inserir(8);
	arv.inserir(3);
	arv.inserir(10);
	arv.inserir(14);
	arv.inserir(13);
	arv.inserir(1);
	arv.inserir(6);
	arv.inserir(4);
	arv.inserir(7);

	arv.Imprimir();

	return 0;
}
